#pragma once

/*
----------									  ----------
 **********	 kLib arguments system library	 **********
----------									  ----------
 Presentation :
 kLib argument system is a library which provide a
 programer-friendly system to handle argc and argv
 fonctionnality.

 How to use :
 In the main, an instance of class kArgs must be done :

 kArgs args;

 We must now prepare what arguments might be passed to
 the program and prepare a minimalist documentation for
 them. In this conceptions, arguments are called
 parameters and can be configured with the following
 commands :
 args.addParameter("example");

 With that whe can call our program program.exe like :
 program.exe -example

 A parameter can also handle an input by configuring :
 args.addParameter("example").setGetInput(true);

 program.exe -example thisIsAnInput
 OR
 program.exe -example "This is an input"

 A input can be also handled without parameter :
 args.setGetInput(true);

 program.exe thisIsAnInput
 OR
 program.Exe "This is an input"

 An automatic help system is generated by the
 kLib argument system but can be configured
 with the following commands :

 args.setMainHint("Hint !").setTitle("Example").
 addParameter("ex").setHint("something").
 setHelp("Take something and write something");
*/

#include <core/kPreprocessor.h>
#include <vector>
#include <string>
#include <iostream>

#ifndef KARGS_USE_WIDE_ARGS
using args_t = std::string;
using cargs_t = char;
#define ATX(x) x
#else
using args_t = std::wstring;
using cargs_t = wchar_t;
#define ATX(x) L##x
#endif // !KARGS_USE_WIDE_ARGS

#ifdef UNICODE
using string_t = std::wstring;
#define TX(x) L##x
#else
using string_t = std::string;
#define TX(x) x
#endif // UNICODE

#define K_VER_ARGS 1,0,1

class kArgs;

class kParameter {
	args_t m_Name;
	string_t m_Help, m_Hint;
	kArgs* m_Parent;
	bool takeInput;
public:
	kParameter(const args_t& name, kArgs* parent) : m_Name(name), m_Parent(parent), m_Help("No help given"), m_Hint("input") {}

	kParameter& setGetInput(bool in);
	kParameter& setHelp(const string_t& help);
	kParameter& setHint(const string_t& hint);

	kArgs& getParent() const;

	const args_t& _getName() const;
	const string_t& _getHelp() const;
	const string_t& _getHint() const;
	bool _getTakeInput() const;

};

class kPassedParameter {
	const args_t m_Name;
	const string_t m_Content;

public:

	static kPassedParameter null;

	kPassedParameter(const args_t& name, const string_t& content) : m_Name(name), m_Content(content) {}

	const args_t& getName() const;
	const string_t& getContent() const;

	bool operator==(const kPassedParameter& p) const;
	bool operator!=(const kPassedParameter& p) const;
	
	bool operator()() const;
	bool operator!() const;

	operator bool() const;
};

class kArgs {
	std::vector<kParameter> m_Parameters;
	std::vector<kPassedParameter> m_PassedParameters;

	bool takeInput;
	string_t m_MainContent, m_HelpTitle, m_MainHint, m_Description;

	kParameter nullParam;

	void displayHelp(const string_t& exe);

public:

	kArgs() : nullParam{ ATX("ERRORED"), nullptr }, m_HelpTitle("KLIB GENERATED HELP"), m_MainHint("Input"), m_Description() {}

	kArgs& setGetInput(bool in);
	kArgs& setHelpTitle(const string_t& title);
	kArgs& setMainHint(const string_t& hint);

	kParameter& addParameter(const args_t& name);

	kParameter& getParameter(const args_t& name);
	kPassedParameter& getPassedParameter(const args_t& name);

	bool parseArgv(int argc, cargs_t** argv);

};